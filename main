pragma solidity ^0.8.0;

contract Escrow {
    address public buyer;
    address public seller;
    address public arbiter;
    uint256 public amount;

    enum State { AWAITING_PAYMENT, AWAITING_DELIVERY, COMPLETE, REFUNDED }
    State public currentState;

    event PaymentReceived(address indexed _from, uint256 _amount);
    event ItemDelivered(address indexed _by, address indexed _to);
    event RefundInitiated(address indexed _by, uint256 _amount);

    constructor(address _buyer, address _seller, address _arbiter, uint256 _amount) {
        buyer = _buyer;
        seller = _seller;
        arbiter = _arbiter;
        amount = _amount;
        currentState = State.AWAITING_PAYMENT;
    }

    function makePayment() public payable {
        require(msg.sender == buyer, "Only the buyer can make the payment.");
        require(currentState == State.AWAITING_PAYMENT, "Invalid state.");
        require(msg.value == amount, "Incorrect payment amount.");

        currentState = State.AWAITING_DELIVERY;
        emit PaymentReceived(msg.sender, msg.value);
    }

    function confirmDelivery() public {
        require(msg.sender == buyer || msg.sender == seller, "Only the buyer or seller can confirm the delivery.");
        require(currentState == State.AWAITING_DELIVERY, "Invalid state.");

        currentState = State.COMPLETE;
        emit ItemDelivered(msg.sender, msg.sender == buyer ? seller : buyer);

        // Transfer funds to the seller
        payable(seller).transfer(amount);
    }

    function initiateRefund() public {
        require(msg.sender == buyer || msg.sender == arbiter, "Only the buyer or arbiter can initiate a refund.");
        require(currentState == State.AWAITING_DELIVERY, "Invalid state.");

        currentState = State.REFUNDED;
        emit RefundInitiated(msg.sender, amount);

        // Refund the buyer
        payable(buyer).transfer(amount);
    }
}
